spring:
  datasource:
    dynamic:
      primary: master #设置默认的数据源或者数据源组,默认值即为master
      strict: false #严格匹配数据源,默认false. true未匹配到指定数据源时抛异常,false使用默认数据源
      datasource:
        master:
          url: jdbc:mysql://localhost:3306/coolguard?allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowPublicKeyRetrieval=true
          username: wnhyang
          password: wnhyang
          driver-class-name: com.mysql.cj.jdbc.Driver # 3.2.0开始支持SPI可省略此配置
        slave:
          url: jdbc:mysql://localhost:3306/coolguard?allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowPublicKeyRetrieval=true
          username: wnhyang
          password: wnhyang
          driver-class-name: com.mysql.cj.jdbc.Driver # 3.2.0开始支持SPI可省略此配置
  data:
    redis:
      host: localhost
      port: 6379
      # cluster:
      #   nodes: 127.0.0.1:6379
      database: 0
      password: wnhyang
      lettuce:
        pool:
          max-active: 64 #最大连接数，0表示无限制
          max-idle: 32 #最大等待连接数，0表示无限制
          min-idle: 0 #最小等待连接数，0表示无限制
          max-wait: 20ms #最大建立连接等待时间，-1表示无限制
        shutdown-timeout: 100ms
  # kafka配置
  kafka:
    bootstrap-servers: localhost:9092

liteflow:
  # 自定义Lf主线程池
  main-executor-class: cn.wnhyang.coolguard.thread.LfMainExecutorBuilder
  # 自定义Lf异步线程池
  global-thread-pool-executor-class: cn.wnhyang.coolguard.thread.LfAsyncExecutorBuilder
  rule-source-ext-data-map:
    url: jdbc:mysql://localhost:3306/coolguard?allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowPublicKeyRetrieval=true
    driverClassName: com.mysql.cj.jdbc.Driver
    username: wnhyang
    password: wnhyang
    applicationName: ${spring.application.name}
    #是否开启SQL日志
    sqlLogEnabled: true
    #是否开启SQL数据轮询自动刷新机制 默认不开启
    pollingEnabled: true
    pollingIntervalSeconds: 60
    pollingStartSeconds: 60
    #以下是chain表的配置，这个一定得有
    chainTableName: de_chain
    chainApplicationNameField: application_name
    chainNameField: chain_name
    elDataField: el_data
    chainEnableField: enable
    #以下是script表的配置，如果你没使用到脚本，下面可以不配置
  print-execution-log: false

#    scriptTableName: script
#    scriptApplicationNameField: application_name
#    scriptIdField: script_id
#    scriptNameField: script_name
#    scriptDataField: script_data
#    scriptTypeField: script_type
#    scriptLanguageField: script_language
#    scriptEnableField: enable

############## Sa-Token 配置 (文档: https://sa-token.cc) ##############
sa-token:
  # token 名称（同时也是 cookie 名称）
  token-name: Authorization
  # token 有效期（单位：秒） 默认30天，-1 代表永久有效
  timeout: 259200
  # token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认-1 代表不限制，永不冻结
  active-timeout: 1800
  # 是否允许同一账号多地同时登录 （为 true 时允许一起登录, 为 false 时新登录挤掉旧登录）
  is-concurrent: false
  # 在多人登录同一账号时，是否共用一个 token （为 true 时所有登录共用一个 token, 为 false 时每次登录新建一个 token）
  is-share: true
  # 是否尝试从header里读取token
  is-read-header: true
  # 是否尝试从cookie里读取token
  is-read-cookie: false
  # token前缀
  token-prefix: "Bearer"
  # token 风格（默认可取值：uuid、simple-uuid、random-32、random-64、random-128、tik）
  token-style: tik
  # 是否输出操作日志
  is-log: true

# 日志配置
logging:
  level:
    cn.wnhyang.coolguard.mapper: debug